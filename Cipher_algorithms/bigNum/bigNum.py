# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_bigNum', [dirname(__file__)])
        except ImportError:
            import _bigNum
            return _bigNum
        if fp is not None:
            try:
                _mod = imp.load_module('_bigNum', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _bigNum = swig_import_helper()
    del swig_import_helper
else:
    import _bigNum
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_bigNum.BASE_swigconstant(_bigNum)
BASE = _bigNum.BASE

_bigNum.DIV_BY_ZERO_swigconstant(_bigNum)
DIV_BY_ZERO = _bigNum.DIV_BY_ZERO
class bigNum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bigNum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bigNum, name)

    def __init__(self, *args):
        this = _bigNum.new_bigNum(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _bigNum.delete_bigNum
    __del__ = lambda self: None

    def getString(self):
        return _bigNum.bigNum_getString(self)

    def __str__(self):
        return _bigNum.bigNum___str__(self)

    def __repr__(self):
        return _bigNum.bigNum___repr__(self)

    def getNum_From_txt(self, FileName):
        return _bigNum.bigNum_getNum_From_txt(self, FileName)

    def saveNum_To_txt(self, FileName):
        return _bigNum.bigNum_saveNum_To_txt(self, FileName)

    def getNum_From_binfile(self, FileName):
        return _bigNum.bigNum_getNum_From_binfile(self, FileName)

    def saveNum_To_binfile(self, FileName):
        return _bigNum.bigNum_saveNum_To_binfile(self, FileName)

    def __neg__(self):
        return _bigNum.bigNum___neg__(self)

    def __xor__(self, right):
        return _bigNum.bigNum___xor__(self, right)

    def __add__(self, *args):
        return _bigNum.bigNum___add__(self, *args)

    def __sub__(self, *args):
        return _bigNum.bigNum___sub__(self, *args)

    def __mul__(self, *args):
        return _bigNum.bigNum___mul__(self, *args)

    def __div__(self, *args):
        return _bigNum.bigNum___div__(self, *args)

    def __mod__(self, *args):
        return _bigNum.bigNum___mod__(self, *args)

    def __gt__(self, *args):
        return _bigNum.bigNum___gt__(self, *args)

    def __ge__(self, *args):
        return _bigNum.bigNum___ge__(self, *args)

    def __lt__(self, *args):
        return _bigNum.bigNum___lt__(self, *args)

    def __le__(self, *args):
        return _bigNum.bigNum___le__(self, *args)

    def __eq__(self, *args):
        return _bigNum.bigNum___eq__(self, *args)

    def __ne__(self, *args):
        return _bigNum.bigNum___ne__(self, *args)

    def Odd(self):
        return _bigNum.bigNum_Odd(self)
    __swig_setmethods__["_digits"] = _bigNum.bigNum__digits_set
    __swig_getmethods__["_digits"] = _bigNum.bigNum__digits_get
    if _newclass:
        _digits = _swig_property(_bigNum.bigNum__digits_get, _bigNum.bigNum__digits_set)
    __swig_setmethods__["_size"] = _bigNum.bigNum__size_set
    __swig_getmethods__["_size"] = _bigNum.bigNum__size_get
    if _newclass:
        _size = _swig_property(_bigNum.bigNum__size_get, _bigNum.bigNum__size_set)

    def _setSize(self, size):
        return _bigNum.bigNum__setSize(self, size)

    def _DelZeroes(self):
        return _bigNum.bigNum__DelZeroes(self)
bigNum_swigregister = _bigNum.bigNum_swigregister
bigNum_swigregister(bigNum)


def go_generate():
    return _bigNum.go_generate()
go_generate = _bigNum.go_generate

def to_pow(A, B, modulus):
    return _bigNum.to_pow(A, B, modulus)
to_pow = _bigNum.to_pow

def random_big(max_value):
    return _bigNum.random_big(max_value)
random_big = _bigNum.random_big

def random_fixlen(len):
    return _bigNum.random_fixlen(len)
random_fixlen = _bigNum.random_fixlen
# This file is compatible with both classic and new-style classes.


